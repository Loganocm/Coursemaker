import { parseAIGeneratedCourse } from '../src/utils/courseParser';import { AIGeneratedCourse, Course } from '../src/types';describe('parseAIGeneratedCourse', () => {  it('should correctly parse a valid AIGeneratedCourse object into a Course object', () => {    const mockAIGeneratedCourse: AIGeneratedCourse = {      notes: "## Introduction to AI\nAI is a fascinating field.",      flashcards: [        { front: "What is AI?", back: "Artificial Intelligence" },        { front: "Who is Alan Turing?", back: "Father of AI" },      ],      quizzes: [        {          question: "What does AI stand for?",          options: ["Artificial Intelligence", "Automated Information", "Advanced Informatics", "Algorithmic Integration"],          correctAnswer: "Artificial Intelligence",        },        {          question: "Which test is used to determine a machine's ability to exhibit intelligent behavior?",          options: ["Turing Test", "IQ Test", "EQ Test", "AI Test"],          correctAnswer: "Turing Test",        },      ],    };    const parsedCourse: Course = parseAIGeneratedCourse(mockAIGeneratedCourse);    expect(parsedCourse).toBeDefined();    expect(parsedCourse.title).toEqual('AI Generated Course');    expect(parsedCourse.modules).toHaveLength(1);    const mainModule = parsedCourse.modules[0];    expect(mainModule.title).toEqual('Main Module');    expect(mainModule.notes).toEqual(mockAIGeneratedCourse.notes);    expect(mainModule.flashcards).toHaveLength(mockAIGeneratedCourse.flashcards.length);    expect(mainModule.flashcards[0].question).toEqual(mockAIGeneratedCourse.flashcards[0].front);    expect(mainModule.flashcards[0].answer).toEqual(mockAIGeneratedCourse.flashcards[0].back);    expect(mainModule.flashcards[0].id).toBeDefined();    expect(mainModule.quiz).toHaveLength(mockAIGeneratedCourse.quizzes.length);    expect(mainModule.quiz[0].question).toEqual(mockAIGeneratedCourse.quizzes[0].question);    expect(mainModule.quiz[0].options).toEqual(mockAIGeneratedCourse.quizzes[0].options);    expect(mainModule.quiz[0].correctAnswer).toEqual(0); // "Artificial Intelligence" is at index 0    expect(mainModule.quiz[0].id).toBeDefined();  });  it('should handle an empty AIGeneratedCourse object', () => {    const emptyAIGeneratedCourse: AIGeneratedCourse = {      notes: "",      flashcards: [],      quizzes: [],    };    const parsedCourse: Course = parseAIGeneratedCourse(emptyAIGeneratedCourse);    expect(parsedCourse).toBeDefined();    expect(parsedCourse.title).toEqual('AI Generated Course');    expect(parsedCourse.modules).toHaveLength(1);    const mainModule = parsedCourse.modules[0];    expect(mainModule.title).toEqual('Main Module');    expect(mainModule.notes).toEqual("");    expect(mainModule.flashcards).toHaveLength(0);    expect(mainModule.quiz).toHaveLength(0);  });  it('should handle AIGeneratedCourse with missing notes, flashcards, or quizzes', () => {    const partialAIGeneratedCourse: AIGeneratedCourse = {      notes: "Only notes here.",      flashcards: [],      quizzes: [],    };    const parsedCourse: Course = parseAIGeneratedCourse(partialAIGeneratedCourse);    expect(parsedCourse.modules[0].notes).toEqual("Only notes here.");    expect(parsedCourse.modules[0].flashcards).toHaveLength(0);    expect(parsedCourse.modules[0].quiz).toHaveLength(0);  });  it('should correctly convert correctAnswer string to index', () => {    const aiCourseWithDifferentCorrectAnswer: AIGeneratedCourse = {      notes: "",      flashcards: [],      quizzes: [        {          question: "What is the capital of France?",          options: ["Berlin", "Madrid", "Paris", "Rome"],          correctAnswer: "Paris",        },      ],    };    const parsedCourse: Course = parseAIGeneratedCourse(aiCourseWithDifferentCorrectAnswer);    expect(parsedCourse.modules[0].quiz[0].correctAnswer).toEqual(2); // Paris is at index 2  });  it('should handle correctAnswer not found in options', () => {    const aiCourseInvalidCorrectAnswer: AIGeneratedCourse = {      notes: "",      flashcards: [],      quizzes: [        {          question: "Invalid answer?",          options: ["A", "B", "C"],          correctAnswer: "D", // Not in options        },      ],    };    const parsedCourse: Course = parseAIGeneratedCourse(aiCourseInvalidCorrectAnswer);    expect(parsedCourse.modules[0].quiz[0].correctAnswer).toEqual(-1); // indexOf returns -1 if not found  });});

